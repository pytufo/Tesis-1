{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport NativeModules from \"react-native-web/dist/exports/NativeModules\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nvar RNKeychainManager = NativeModules.RNKeychainManager;\nexport var SECURITY_LEVEL = Object.freeze({\n  ANY: RNKeychainManager && RNKeychainManager.SECURITY_LEVEL_ANY,\n  SECURE_SOFTWARE: RNKeychainManager && RNKeychainManager.SECURITY_LEVEL_SECURE_SOFTWARE,\n  SECURE_HARDWARE: RNKeychainManager && RNKeychainManager.SECURITY_LEVEL_SECURE_HARDWARE\n});\nexport var ACCESSIBLE = Object.freeze({\n  WHEN_UNLOCKED: 'AccessibleWhenUnlocked',\n  AFTER_FIRST_UNLOCK: 'AccessibleAfterFirstUnlock',\n  ALWAYS: 'AccessibleAlways',\n  WHEN_PASSCODE_SET_THIS_DEVICE_ONLY: 'AccessibleWhenPasscodeSetThisDeviceOnly',\n  WHEN_UNLOCKED_THIS_DEVICE_ONLY: 'AccessibleWhenUnlockedThisDeviceOnly',\n  AFTER_FIRST_UNLOCK_THIS_DEVICE_ONLY: 'AccessibleAfterFirstUnlockThisDeviceOnly'\n});\nexport var ACCESS_CONTROL = Object.freeze({\n  USER_PRESENCE: 'UserPresence',\n  BIOMETRY_ANY: 'BiometryAny',\n  BIOMETRY_CURRENT_SET: 'BiometryCurrentSet',\n  DEVICE_PASSCODE: 'DevicePasscode',\n  APPLICATION_PASSWORD: 'ApplicationPassword',\n  BIOMETRY_ANY_OR_DEVICE_PASSCODE: 'BiometryAnyOrDevicePasscode',\n  BIOMETRY_CURRENT_SET_OR_DEVICE_PASSCODE: 'BiometryCurrentSetOrDevicePasscode'\n});\nexport var AUTHENTICATION_TYPE = Object.freeze({\n  DEVICE_PASSCODE_OR_BIOMETRICS: 'AuthenticationWithBiometricsDevicePasscode',\n  BIOMETRICS: 'AuthenticationWithBiometrics'\n});\nexport var BIOMETRY_TYPE = Object.freeze({\n  TOUCH_ID: 'TouchID',\n  FACE_ID: 'FaceID',\n  FINGERPRINT: 'Fingerprint',\n  FACE: 'Face',\n  IRIS: 'Iris'\n});\nexport var STORAGE_TYPE = Object.freeze({\n  FB: 'FacebookConceal',\n  AES: 'KeystoreAESCBC',\n  RSA: 'KeystoreRSAECB',\n  KC: 'keychain'\n});\nexport var SECURITY_RULES = Object.freeze({\n  NONE: 'none',\n  AUTOMATIC_UPGRADE: 'automaticUpgradeToMoreSecuredStorage'\n});\nvar AUTH_PROMPT_DEFAULTS = {\n  title: 'Authenticate to retrieve secret',\n  cancel: 'Cancel'\n};\nfunction normalizeServiceOption(serviceOrOptions) {\n  if (typeof serviceOrOptions === 'string') {\n    console.warn(`You passed a service string as an argument to one of the react-native-keychain functions.\n      This way of passing service is deprecated and will be removed in a future major.\n      Please update your code to use { service: ${JSON.stringify(serviceOrOptions)} }`);\n    return {\n      service: serviceOrOptions\n    };\n  }\n  return serviceOrOptions || {};\n}\nfunction normalizeOptions(serviceOrOptions) {\n  var options = _objectSpread({}, normalizeServiceOption(serviceOrOptions));\n  var authenticationPrompt = options.authenticationPrompt;\n  if (typeof authenticationPrompt === 'string') {\n    console.warn(`You passed a authenticationPrompt string as an argument to one of the react-native-keychain functions.\n      This way of passing authenticationPrompt is deprecated and will be removed in a future major.\n      Please update your code to use { authenticationPrompt: { title: ${JSON.stringify(authenticationPrompt)} }`);\n    options.authenticationPrompt = _objectSpread(_objectSpread({}, AUTH_PROMPT_DEFAULTS), {}, {\n      title: authenticationPrompt\n    });\n  } else {\n    options.authenticationPrompt = _objectSpread(_objectSpread({}, AUTH_PROMPT_DEFAULTS), authenticationPrompt);\n  }\n  return options;\n}\nexport function setGenericPassword(username, password, serviceOrOptions) {\n  var options = normalizeOptions(serviceOrOptions);\n  return RNKeychainManager.setGenericPasswordForOptions(options, username, password);\n}\nexport function getGenericPassword(serviceOrOptions) {\n  var options = normalizeOptions(serviceOrOptions);\n  return RNKeychainManager.getGenericPasswordForOptions(options);\n}\nexport function resetGenericPassword(serviceOrOptions) {\n  var options = normalizeOptions(serviceOrOptions);\n  return RNKeychainManager.resetGenericPasswordForOptions(options);\n}\nexport function getAllGenericPasswordServices() {\n  return RNKeychainManager.getAllGenericPasswordServices();\n}\nexport function hasInternetCredentials(server) {\n  return RNKeychainManager.hasInternetCredentialsForServer(server);\n}\nexport function setInternetCredentials(server, username, password, options) {\n  return RNKeychainManager.setInternetCredentialsForServer(server, username, password, options);\n}\nexport function getInternetCredentials(server, options) {\n  return RNKeychainManager.getInternetCredentialsForServer(server, normalizeOptions(options));\n}\nexport function resetInternetCredentials(server) {\n  return RNKeychainManager.resetInternetCredentialsForServer(server);\n}\nexport function getSupportedBiometryType() {\n  if (!RNKeychainManager.getSupportedBiometryType) {\n    return Promise.resolve(null);\n  }\n  return RNKeychainManager.getSupportedBiometryType();\n}\nexport function requestSharedWebCredentials() {\n  if (Platform.OS !== 'ios') {\n    return Promise.reject(new Error(`requestSharedWebCredentials() is not supported on ${Platform.OS} yet`));\n  }\n  return RNKeychainManager.requestSharedWebCredentials();\n}\nexport function setSharedWebCredentials(server, username, password) {\n  if (Platform.OS !== 'ios') {\n    return Promise.reject(new Error(`setSharedWebCredentials() is not supported on ${Platform.OS} yet`));\n  }\n  return RNKeychainManager.setSharedWebCredentialsForServer(server, username, password);\n}\nexport function canImplyAuthentication(options) {\n  if (!RNKeychainManager.canCheckAuthentication) {\n    return Promise.resolve(false);\n  }\n  return RNKeychainManager.canCheckAuthentication(options);\n}\nexport function getSecurityLevel(options) {\n  if (!RNKeychainManager.getSecurityLevel) {\n    return Promise.resolve(null);\n  }\n  return RNKeychainManager.getSecurityLevel(options);\n}\nexport default {\n  SECURITY_LEVEL: SECURITY_LEVEL,\n  ACCESSIBLE: ACCESSIBLE,\n  ACCESS_CONTROL: ACCESS_CONTROL,\n  AUTHENTICATION_TYPE: AUTHENTICATION_TYPE,\n  BIOMETRY_TYPE: BIOMETRY_TYPE,\n  STORAGE_TYPE: STORAGE_TYPE,\n  SECURITY_RULES: SECURITY_RULES,\n  getSecurityLevel: getSecurityLevel,\n  canImplyAuthentication: canImplyAuthentication,\n  getSupportedBiometryType: getSupportedBiometryType,\n  setInternetCredentials: setInternetCredentials,\n  getInternetCredentials: getInternetCredentials,\n  resetInternetCredentials: resetInternetCredentials,\n  setGenericPassword: setGenericPassword,\n  getGenericPassword: getGenericPassword,\n  getAllGenericPasswordServices: getAllGenericPasswordServices,\n  resetGenericPassword: resetGenericPassword,\n  requestSharedWebCredentials: requestSharedWebCredentials,\n  setSharedWebCredentials: setSharedWebCredentials\n};","map":{"version":3,"names":["RNKeychainManager","NativeModules","SECURITY_LEVEL","Object","freeze","ANY","SECURITY_LEVEL_ANY","SECURE_SOFTWARE","SECURITY_LEVEL_SECURE_SOFTWARE","SECURE_HARDWARE","SECURITY_LEVEL_SECURE_HARDWARE","ACCESSIBLE","WHEN_UNLOCKED","AFTER_FIRST_UNLOCK","ALWAYS","WHEN_PASSCODE_SET_THIS_DEVICE_ONLY","WHEN_UNLOCKED_THIS_DEVICE_ONLY","AFTER_FIRST_UNLOCK_THIS_DEVICE_ONLY","ACCESS_CONTROL","USER_PRESENCE","BIOMETRY_ANY","BIOMETRY_CURRENT_SET","DEVICE_PASSCODE","APPLICATION_PASSWORD","BIOMETRY_ANY_OR_DEVICE_PASSCODE","BIOMETRY_CURRENT_SET_OR_DEVICE_PASSCODE","AUTHENTICATION_TYPE","DEVICE_PASSCODE_OR_BIOMETRICS","BIOMETRICS","BIOMETRY_TYPE","TOUCH_ID","FACE_ID","FINGERPRINT","FACE","IRIS","STORAGE_TYPE","FB","AES","RSA","KC","SECURITY_RULES","NONE","AUTOMATIC_UPGRADE","AUTH_PROMPT_DEFAULTS","title","cancel","normalizeServiceOption","serviceOrOptions","console","warn","JSON","stringify","service","normalizeOptions","options","_objectSpread","authenticationPrompt","setGenericPassword","username","password","setGenericPasswordForOptions","getGenericPassword","getGenericPasswordForOptions","resetGenericPassword","resetGenericPasswordForOptions","getAllGenericPasswordServices","hasInternetCredentials","server","hasInternetCredentialsForServer","setInternetCredentials","setInternetCredentialsForServer","getInternetCredentials","getInternetCredentialsForServer","resetInternetCredentials","resetInternetCredentialsForServer","getSupportedBiometryType","Promise","resolve","requestSharedWebCredentials","Platform","OS","reject","Error","setSharedWebCredentials","setSharedWebCredentialsForServer","canImplyAuthentication","canCheckAuthentication","getSecurityLevel"],"sources":["/opt/frontend/app/node_modules/react-native-keychain/index.js"],"sourcesContent":["// @flow\nimport { NativeModules, Platform } from 'react-native';\n\nconst { RNKeychainManager } = NativeModules;\n\nexport const SECURITY_LEVEL: {\n  ANY: string,\n  SECURE_SOFTWARE: string,\n  SECURE_HARDWARE: string,\n} = Object.freeze({\n  ANY: RNKeychainManager && RNKeychainManager.SECURITY_LEVEL_ANY,\n  SECURE_SOFTWARE:\n    RNKeychainManager && RNKeychainManager.SECURITY_LEVEL_SECURE_SOFTWARE,\n  SECURE_HARDWARE:\n    RNKeychainManager && RNKeychainManager.SECURITY_LEVEL_SECURE_HARDWARE,\n});\n\nexport const ACCESSIBLE = Object.freeze({\n  WHEN_UNLOCKED: 'AccessibleWhenUnlocked',\n  AFTER_FIRST_UNLOCK: 'AccessibleAfterFirstUnlock',\n  ALWAYS: 'AccessibleAlways',\n  WHEN_PASSCODE_SET_THIS_DEVICE_ONLY: 'AccessibleWhenPasscodeSetThisDeviceOnly',\n  WHEN_UNLOCKED_THIS_DEVICE_ONLY: 'AccessibleWhenUnlockedThisDeviceOnly',\n  AFTER_FIRST_UNLOCK_THIS_DEVICE_ONLY:\n    'AccessibleAfterFirstUnlockThisDeviceOnly',\n});\n\nexport const ACCESS_CONTROL = Object.freeze({\n  USER_PRESENCE: 'UserPresence',\n  BIOMETRY_ANY: 'BiometryAny',\n  BIOMETRY_CURRENT_SET: 'BiometryCurrentSet',\n  DEVICE_PASSCODE: 'DevicePasscode',\n  APPLICATION_PASSWORD: 'ApplicationPassword',\n  BIOMETRY_ANY_OR_DEVICE_PASSCODE: 'BiometryAnyOrDevicePasscode',\n  BIOMETRY_CURRENT_SET_OR_DEVICE_PASSCODE: 'BiometryCurrentSetOrDevicePasscode',\n});\n\nexport const AUTHENTICATION_TYPE = Object.freeze({\n  DEVICE_PASSCODE_OR_BIOMETRICS: 'AuthenticationWithBiometricsDevicePasscode',\n  BIOMETRICS: 'AuthenticationWithBiometrics',\n});\n\nexport const BIOMETRY_TYPE = Object.freeze({\n  TOUCH_ID: 'TouchID',\n  FACE_ID: 'FaceID',\n  FINGERPRINT: 'Fingerprint',\n  FACE: 'Face',\n  IRIS: 'Iris',\n});\n\nexport const STORAGE_TYPE = Object.freeze({\n  FB: 'FacebookConceal',\n  AES: 'KeystoreAESCBC',\n  RSA: 'KeystoreRSAECB',\n  KC: 'keychain', // <~ iOS only\n});\n\nexport const SECURITY_RULES = Object.freeze({\n  NONE: 'none',\n  AUTOMATIC_UPGRADE: 'automaticUpgradeToMoreSecuredStorage',\n});\n\nexport type SecAccessible = $Values<typeof ACCESSIBLE>;\n\nexport type SecAccessControl = $Values<typeof ACCESS_CONTROL>;\n\nexport type LAPolicy = $Values<typeof AUTHENTICATION_TYPE>;\n\nexport type SecMinimumLevel = $Values<typeof SECURITY_LEVEL>;\n\nexport type SecStorageType = $Values<typeof STORAGE_TYPE>;\n\nexport type SecSecurityRules = $Values<typeof SECURITY_RULES>;\n\nexport type SecBiometryType = $Values<typeof BIOMETRY_TYPE>;\n\nexport type AuthenticationPrompt = {|\n  title?: string,\n  subtitle?: string,\n  description?: string,\n  cancel?: string,\n|};\n\ntype BaseOptions = {|\n  accessControl?: SecAccessControl,\n  accessGroup?: string,\n  accessible?: SecAccessible,\n  authenticationType?: LAPolicy,\n  service?: string,\n  securityLevel?: SecMinimumLevel,\n  storage?: SecStorageType,\n  rules?: SecSecurityRules,\n|};\n\ntype NormalizedOptions = {\n  authenticationPrompt?: AuthenticationPrompt,\n  ...BaseOptions,\n};\n\nexport type Options = $Shape<{|\n  authenticationPrompt?: string | AuthenticationPrompt,\n  ...BaseOptions,\n|}>;\n\nexport type Result = {|\n  +service: string,\n  +storage: string,\n|};\n\nexport type UserCredentials = {|\n  +username: string,\n  +password: string,\n  ...Result,\n|};\n\nexport type SharedWebCredentials = {|\n  +server: string,\n  ...UserCredentials,\n|};\n\nconst AUTH_PROMPT_DEFAULTS = {\n  title: 'Authenticate to retrieve secret',\n  cancel: 'Cancel',\n};\n\nfunction normalizeServiceOption(serviceOrOptions?: string | Options): Options {\n  if (typeof serviceOrOptions === 'string') {\n    console.warn(\n      `You passed a service string as an argument to one of the react-native-keychain functions.\n      This way of passing service is deprecated and will be removed in a future major.\n      Please update your code to use { service: ${JSON.stringify(\n        serviceOrOptions\n      )} }`\n    );\n    return { service: serviceOrOptions };\n  }\n  return serviceOrOptions || {};\n}\n\nfunction normalizeOptions(\n  serviceOrOptions?: string | Options\n): NormalizedOptions {\n  let options = { ...normalizeServiceOption(serviceOrOptions) };\n  const { authenticationPrompt } = options;\n\n  if (typeof authenticationPrompt === 'string') {\n    console.warn(\n      `You passed a authenticationPrompt string as an argument to one of the react-native-keychain functions.\n      This way of passing authenticationPrompt is deprecated and will be removed in a future major.\n      Please update your code to use { authenticationPrompt: { title: ${JSON.stringify(\n        authenticationPrompt\n      )} }`\n    );\n    options.authenticationPrompt = {\n      ...AUTH_PROMPT_DEFAULTS,\n      title: authenticationPrompt,\n    };\n  } else {\n    options.authenticationPrompt = {\n      ...AUTH_PROMPT_DEFAULTS,\n      ...authenticationPrompt,\n    };\n  }\n\n  // $FlowFixMe >=0.107.x – remove in next major, when authenticationPrompt as string is removed\n  return options;\n}\n\n//* EXPORTS */\n\n/**\n * Saves the `username` and `password` combination for `service`.\n * @param {string} username Associated username or e-mail to be saved.\n * @param {string} password Associated password to be saved.\n * @param {object} options A keychain options object.\n * @return {Promise} Resolves to `{ service, storage }` when successful\n */\nexport function setGenericPassword(\n  username: string,\n  password: string,\n  serviceOrOptions?: string | Options\n): Promise<false | Result> {\n  const options = normalizeOptions(serviceOrOptions);\n  return RNKeychainManager.setGenericPasswordForOptions(\n    options,\n    username,\n    password\n  );\n}\n\n/**\n * Fetches login combination for `service`.\n * @param {object} options A keychain options object.\n * @return {Promise} Resolves to `{ service, username, password, storage }` when successful\n */\nexport function getGenericPassword(\n  serviceOrOptions?: string | Options\n): Promise<false | UserCredentials> {\n  const options = normalizeOptions(serviceOrOptions);\n  return RNKeychainManager.getGenericPasswordForOptions(options);\n}\n\n/**\n * Deletes all generic password keychain entries for `service`.\n * @param {object} options An Keychain options object.\n * @return {Promise} Resolves to `true` when successful\n */\nexport function resetGenericPassword(\n  serviceOrOptions?: string | Options\n): Promise<boolean> {\n  const options = normalizeOptions(serviceOrOptions);\n  return RNKeychainManager.resetGenericPasswordForOptions(options);\n}\n\n/**\n * Gets all `service` keys used in keychain entries.\n * @return {Promise} Resolves to an array of strings\n */\nexport function getAllGenericPasswordServices(): Promise<string[]> {\n  return RNKeychainManager.getAllGenericPasswordServices();\n}\n\n/**\n * Checks if we have a login combination for `server`.\n * @param {string} server URL to server.\n * @return {Promise} Resolves to `{service, storage}` when successful\n */\nexport function hasInternetCredentials(\n  server: string\n): Promise<false | Result> {\n  return RNKeychainManager.hasInternetCredentialsForServer(server);\n}\n\n/**\n * Saves the `username` and `password` combination for `server`.\n * @param {string} server URL to server.\n * @param {string} username Associated username or e-mail to be saved.\n * @param {string} password Associated password to be saved.\n * @param {object} options A keychain options object.\n * @return {Promise} Resolves to `{service, storage}` when successful\n */\nexport function setInternetCredentials(\n  server: string,\n  username: string,\n  password: string,\n  options?: Options\n): Promise<false | Result> {\n  return RNKeychainManager.setInternetCredentialsForServer(\n    server,\n    username,\n    password,\n    options\n  );\n}\n\n/**\n * Fetches login combination for `server`.\n * @param {string} server URL to server.\n * @param {object} options A keychain options object.\n * @return {Promise} Resolves to `{ server, username, password }` when successful\n */\nexport function getInternetCredentials(\n  server: string,\n  options?: Options\n): Promise<false | UserCredentials> {\n  return RNKeychainManager.getInternetCredentialsForServer(\n    server,\n    normalizeOptions(options)\n  );\n}\n\n/**\n * Deletes all internet password keychain entries for `server`.\n * @param {string} server URL to server.\n * @param {object} options Keychain options, iOS only\n * @return {Promise} Resolves to `true` when successful\n */\nexport function resetInternetCredentials(server: string): Promise<void> {\n  return RNKeychainManager.resetInternetCredentialsForServer(server);\n}\n\n/**\n * Get what type of Class 3 (strong) biometry support the device has.\n * @param {object} options An Keychain options object.\n * @return {Promise} Resolves to a `BIOMETRY_TYPE` when supported, otherwise `null`\n */\nexport function getSupportedBiometryType(): Promise<null | SecBiometryType> {\n  if (!RNKeychainManager.getSupportedBiometryType) {\n    return Promise.resolve(null);\n  }\n\n  return RNKeychainManager.getSupportedBiometryType();\n}\n\n//* IOS ONLY */\n\n/**\n * Asks the user for a shared web credential.\n * @return {Promise} Resolves to `{ server, username, password }` if approved and\n * `false` if denied and throws an error if not supported on platform or there's no shared credentials\n */\nexport function requestSharedWebCredentials(): Promise<\n  false | SharedWebCredentials\n> {\n  if (Platform.OS !== 'ios') {\n    return Promise.reject(\n      new Error(\n        `requestSharedWebCredentials() is not supported on ${Platform.OS} yet`\n      )\n    );\n  }\n  return RNKeychainManager.requestSharedWebCredentials();\n}\n\n/**\n * Sets a shared web credential.\n * @param {string} server URL to server.\n * @param {string} username Associated username or e-mail to be saved.\n * @param {string} password Associated password to be saved.\n * @return {Promise} Resolves to `true` when successful\n */\nexport function setSharedWebCredentials(\n  server: string,\n  username: string,\n  password?: string\n): Promise<void> {\n  if (Platform.OS !== 'ios') {\n    return Promise.reject(\n      new Error(\n        `setSharedWebCredentials() is not supported on ${Platform.OS} yet`\n      )\n    );\n  }\n  return RNKeychainManager.setSharedWebCredentialsForServer(\n    server,\n    username,\n    password\n  );\n}\n\n/**\n * Inquire if the type of local authentication policy (LAPolicy) is supported\n * on this device with the device settings the user chose.\n * @param {object} options LAPolicy option, iOS only\n * @return {Promise} Resolves to `true` when supported, otherwise `false`\n */\nexport function canImplyAuthentication(options?: Options): Promise<boolean> {\n  if (!RNKeychainManager.canCheckAuthentication) {\n    return Promise.resolve(false);\n  }\n  return RNKeychainManager.canCheckAuthentication(options);\n}\n\n//* ANDROID ONLY */\n\n/**\n * (Android only) Returns guaranteed security level supported by this library\n * on the current device.\n * @param {object} options A keychain options object.\n * @return {Promise} Resolves to `SECURITY_LEVEL` when supported, otherwise `null`.\n */\nexport function getSecurityLevel(\n  options?: Options\n): Promise<null | SecMinimumLevel> {\n  if (!RNKeychainManager.getSecurityLevel) {\n    return Promise.resolve(null);\n  }\n  return RNKeychainManager.getSecurityLevel(options);\n}\n\n/** Refs: https://www.saltycrane.com/cheat-sheets/flow-type/latest/ */\n\nexport default {\n  SECURITY_LEVEL,\n  ACCESSIBLE,\n  ACCESS_CONTROL,\n  AUTHENTICATION_TYPE,\n  BIOMETRY_TYPE,\n  STORAGE_TYPE,\n  SECURITY_RULES,\n  getSecurityLevel,\n  canImplyAuthentication,\n  getSupportedBiometryType,\n  setInternetCredentials,\n  getInternetCredentials,\n  resetInternetCredentials,\n  setGenericPassword,\n  getGenericPassword,\n  getAllGenericPasswordServices,\n  resetGenericPassword,\n  requestSharedWebCredentials,\n  setSharedWebCredentials,\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}