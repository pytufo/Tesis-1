{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport { NavigationContainer } from \"@react-navigation/native\";\nimport { createStackNavigator } from \"@react-navigation/stack\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport AuthStackScreen from \"./AuthStackScreen\";\nimport AppTabsScreen from \"./AppTabsScreens\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar App = function App() {\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    isLoggedIn = _useState2[0],\n    setIsLoggedIn = _useState2[1];\n  var setLoggedIn = useCallback(function (value) {\n    setIsLoggedIn(value);\n  }, [setIsLoggedIn]);\n  useEffect(function () {\n    var checkAuthentication = function () {\n      var _ref = _asyncToGenerator(function* () {\n        try {\n          var token = yield AsyncStorage.getItem(\"access_token\");\n          setIsLoggedIn(!!token);\n        } catch (error) {\n          console.error(\"error al autenticar\", error);\n        }\n      });\n      return function checkAuthentication() {\n        return _ref.apply(this, arguments);\n      };\n    }();\n    checkAuthentication();\n  }, []);\n  return _jsx(NavigationContainer, {\n    children: isLoggedIn ? _jsx(AppTabsScreen, {}) : _jsx(AuthStackScreen, {})\n  });\n};\nexport default App;","map":{"version":3,"names":["React","useState","useEffect","useCallback","NavigationContainer","createStackNavigator","AsyncStorage","AuthStackScreen","AppTabsScreen","jsx","_jsx","App","_useState","_useState2","_slicedToArray","isLoggedIn","setIsLoggedIn","setLoggedIn","value","checkAuthentication","_ref","_asyncToGenerator","token","getItem","error","console","apply","arguments","children"],"sources":["/opt/frontend/app/App.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from \"react\";\nimport { NavigationContainer } from \"@react-navigation/native\";\nimport { createStackNavigator } from \"@react-navigation/stack\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport AuthStackScreen from \"./AuthStackScreen\";\nimport AppTabsScreen from \"./AppTabsScreens\";\n\n\nconst App = () => {\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const setLoggedIn = useCallback(\n    (value) => {\n      setIsLoggedIn(value);\n    },\n    [setIsLoggedIn]\n  );\n  useEffect(() => {\n    const checkAuthentication = async () => {\n      try {\n        const token = await AsyncStorage.getItem(\"access_token\");\n        setIsLoggedIn(!!token);\n      } catch (error) {\n        console.error(\"error al autenticar\", error);\n      }\n    };\n    checkAuthentication();\n  }, []);\n\n  return (\n    <NavigationContainer>\n      {isLoggedIn ? <AppTabsScreen /> : <AuthStackScreen />}\n    </NavigationContainer>\n  );\n};\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,WAAW,QAAQ,OAAO;AAC/D,SAASC,mBAAmB,QAAQ,0BAA0B;AAC9D,SAASC,oBAAoB,QAAQ,yBAAyB;AAC9D,OAAOC,YAAY,MAAM,2CAA2C;AACpE,OAAOC,eAAe;AACtB,OAAOC,aAAa;AAAyB,SAAAC,GAAA,IAAAC,IAAA;AAG7C,IAAMC,GAAG,GAAG,SAANA,GAAGA,CAAA,EAAS;EAChB,IAAAC,SAAA,GAAoCX,QAAQ,CAAC,KAAK,CAAC;IAAAY,UAAA,GAAAC,cAAA,CAAAF,SAAA;IAA5CG,UAAU,GAAAF,UAAA;IAAEG,aAAa,GAAAH,UAAA;EAChC,IAAMI,WAAW,GAAGd,WAAW,CAC7B,UAACe,KAAK,EAAK;IACTF,aAAa,CAACE,KAAK,CAAC;EACtB,CAAC,EACD,CAACF,aAAa,CAChB,CAAC;EACDd,SAAS,CAAC,YAAM;IACd,IAAMiB,mBAAmB;MAAA,IAAAC,IAAA,GAAAC,iBAAA,CAAG,aAAY;QACtC,IAAI;UACF,IAAMC,KAAK,SAAShB,YAAY,CAACiB,OAAO,CAAC,cAAc,CAAC;UACxDP,aAAa,CAAC,CAAC,CAACM,KAAK,CAAC;QACxB,CAAC,CAAC,OAAOE,KAAK,EAAE;UACdC,OAAO,CAACD,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;QAC7C;MACF,CAAC;MAAA,gBAPKL,mBAAmBA,CAAA;QAAA,OAAAC,IAAA,CAAAM,KAAA,OAAAC,SAAA;MAAA;IAAA,GAOxB;IACDR,mBAAmB,CAAC,CAAC;EACvB,CAAC,EAAE,EAAE,CAAC;EAEN,OACET,IAAA,CAACN,mBAAmB;IAAAwB,QAAA,EACjBb,UAAU,GAAGL,IAAA,CAACF,aAAa,IAAE,CAAC,GAAGE,IAAA,CAACH,eAAe,IAAE;EAAC,CAClC,CAAC;AAE1B,CAAC;AAED,eAAeI,GAAG"},"metadata":{},"sourceType":"module","externalDependencies":[]}