{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState, useEffect } from \"react\";\nimport { NavigationContainer } from \"@react-navigation/native\";\nimport { createStackNavigator } from \"@react-navigation/stack\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar Stack = createStackNavigator();\nvar App = function App() {\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    isLoggedIn = _useState2[0],\n    setIsLoggedIn = _useState2[1];\n  useEffect(function () {\n    var checkAuthentication = function () {\n      var _ref = _asyncToGenerator(function* () {\n        try {\n          var token = yield AsyncStorage.getItem(\"token\");\n          setIsLoggedIn(!!token);\n        } catch (error) {\n          console.error(\"error al autenticar\", error);\n        }\n      });\n      return function checkAuthentication() {\n        return _ref.apply(this, arguments);\n      };\n    }();\n    checkAuthentication();\n  }, []);\n  return _jsx(NavigationContainer, {\n    children: isLoggedIn ? _jsx(AppTabsCreen, {}) : _jsx(AuthStackScreen, {})\n  });\n};\nexport default App;","map":{"version":3,"names":["React","useState","useEffect","NavigationContainer","createStackNavigator","AsyncStorage","jsx","_jsx","Stack","App","_useState","_useState2","_slicedToArray","isLoggedIn","setIsLoggedIn","checkAuthentication","_ref","_asyncToGenerator","token","getItem","error","console","apply","arguments","children","AppTabsCreen","AuthStackScreen"],"sources":["/opt/frontend/app/App.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { NavigationContainer } from \"@react-navigation/native\";\nimport { createStackNavigator } from \"@react-navigation/stack\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\n\nconst Stack = createStackNavigator();\n\nconst App = () => {\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n\n  useEffect(() => {\n    const checkAuthentication = async () => {\n      try {\n        const token = await AsyncStorage.getItem(\"token\");\n        setIsLoggedIn(!!token);\n      } catch (error) {\n        console.error(\"error al autenticar\", error);\n      }\n    };\n    checkAuthentication();\n  }, []);\n\n  return (\n    <NavigationContainer>\n      {isLoggedIn ? <AppTabsCreen /> : <AuthStackScreen />}\n    </NavigationContainer>\n  );\n};\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,mBAAmB,QAAQ,0BAA0B;AAC9D,SAASC,oBAAoB,QAAQ,yBAAyB;AAC9D,OAAOC,YAAY,MAAM,2CAA2C;AAAC,SAAAC,GAAA,IAAAC,IAAA;AAErE,IAAMC,KAAK,GAAGJ,oBAAoB,CAAC,CAAC;AAEpC,IAAMK,GAAG,GAAG,SAANA,GAAGA,CAAA,EAAS;EAChB,IAAAC,SAAA,GAAoCT,QAAQ,CAAC,KAAK,CAAC;IAAAU,UAAA,GAAAC,cAAA,CAAAF,SAAA;IAA5CG,UAAU,GAAAF,UAAA;IAAEG,aAAa,GAAAH,UAAA;EAEhCT,SAAS,CAAC,YAAM;IACd,IAAMa,mBAAmB;MAAA,IAAAC,IAAA,GAAAC,iBAAA,CAAG,aAAY;QACtC,IAAI;UACF,IAAMC,KAAK,SAASb,YAAY,CAACc,OAAO,CAAC,OAAO,CAAC;UACjDL,aAAa,CAAC,CAAC,CAACI,KAAK,CAAC;QACxB,CAAC,CAAC,OAAOE,KAAK,EAAE;UACdC,OAAO,CAACD,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;QAC7C;MACF,CAAC;MAAA,gBAPKL,mBAAmBA,CAAA;QAAA,OAAAC,IAAA,CAAAM,KAAA,OAAAC,SAAA;MAAA;IAAA,GAOxB;IACDR,mBAAmB,CAAC,CAAC;EACvB,CAAC,EAAE,EAAE,CAAC;EAEN,OACER,IAAA,CAACJ,mBAAmB;IAAAqB,QAAA,EACjBX,UAAU,GAAGN,IAAA,CAACkB,YAAY,IAAE,CAAC,GAAGlB,IAAA,CAACmB,eAAe,IAAE;EAAC,CACjC,CAAC;AAE1B,CAAC;AAED,eAAejB,GAAG"},"metadata":{},"sourceType":"module","externalDependencies":[]}